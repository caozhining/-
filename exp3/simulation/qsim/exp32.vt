// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/11/2023 16:18:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    exp32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exp32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg RSET;
// wires                                               
wire cmpctl;
wire cmpres;
wire DR0;
wire mainline0;
wire mainline1;
wire mainline2;
wire mainline3;
wire mainline4;
wire mainline5;
wire mainline6;
wire mainline7;
wire MARCLK;
wire PC0;
wire PC1;
wire PC2;
wire PC3;
wire PCclk;
wire PCCLKct;
wire PCLdn;
wire pin_name1;
wire q9;
wire q10;
wire q11;
wire R0_0;
wire R0_1;
wire R0_2;
wire R0_3;
wire R0_4;
wire R0_5;
wire R0_6;
wire R0_7;
wire R0clk;
wire R0in_2;
wire R0out;
wire R1_0;
wire R1_1;
wire R1_2;
wire R1_3;
wire R1_4;
wire R1_5;
wire R1_6;
wire R1_7;
wire R1CLK;
wire R1out;
wire RAMa0;
wire RAMa1;
wire RAMa2;
wire RAMa3;
wire ramclk;
wire RAMin;
wire RAMout0;
wire RAMout1;
wire RAMout2;
wire RAMout3;
wire RAMout4;
wire RAMout5;
wire RAMout6;
wire RAMout7;
wire ROin_1;
wire ROMa0;
wire ROMa1;
wire ROMa2;
wire ROMa3;
wire ROMa4;
wire ROMa5;
wire ROMa6;
wire ROMa7;
wire uPCclk1;
wire uPCLDN;
wire wren;

// assign statements (if any)                          
exp32 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.cmpctl(cmpctl),
	.cmpres(cmpres),
	.DR0(DR0),
	.mainline0(mainline0),
	.mainline1(mainline1),
	.mainline2(mainline2),
	.mainline3(mainline3),
	.mainline4(mainline4),
	.mainline5(mainline5),
	.mainline6(mainline6),
	.mainline7(mainline7),
	.MARCLK(MARCLK),
	.PC0(PC0),
	.PC1(PC1),
	.PC2(PC2),
	.PC3(PC3),
	.PCclk(PCclk),
	.PCCLKct(PCCLKct),
	.PCLdn(PCLdn),
	.pin_name1(pin_name1),
	.q9(q9),
	.q10(q10),
	.q11(q11),
	.R0_0(R0_0),
	.R0_1(R0_1),
	.R0_2(R0_2),
	.R0_3(R0_3),
	.R0_4(R0_4),
	.R0_5(R0_5),
	.R0_6(R0_6),
	.R0_7(R0_7),
	.R0clk(R0clk),
	.R0in_2(R0in_2),
	.R0out(R0out),
	.R1_0(R1_0),
	.R1_1(R1_1),
	.R1_2(R1_2),
	.R1_3(R1_3),
	.R1_4(R1_4),
	.R1_5(R1_5),
	.R1_6(R1_6),
	.R1_7(R1_7),
	.R1CLK(R1CLK),
	.R1out(R1out),
	.RAMa0(RAMa0),
	.RAMa1(RAMa1),
	.RAMa2(RAMa2),
	.RAMa3(RAMa3),
	.ramclk(ramclk),
	.RAMin(RAMin),
	.RAMout0(RAMout0),
	.RAMout1(RAMout1),
	.RAMout2(RAMout2),
	.RAMout3(RAMout3),
	.RAMout4(RAMout4),
	.RAMout5(RAMout5),
	.RAMout6(RAMout6),
	.RAMout7(RAMout7),
	.ROin_1(ROin_1),
	.ROMa0(ROMa0),
	.ROMa1(ROMa1),
	.ROMa2(ROMa2),
	.ROMa3(ROMa3),
	.ROMa4(ROMa4),
	.ROMa5(ROMa5),
	.ROMa6(ROMa6),
	.ROMa7(ROMa7),
	.RSET(RSET),
	.uPCclk1(uPCclk1),
	.uPCLDN(uPCLDN),
	.wren(wren)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #30000 1'b1;
	# 10000;
	repeat(48)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
end 

// RSET
initial
begin
	RSET = 1'b0;
	RSET = #20000 1'b1;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

