// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/14/2023 11:09:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    exp1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exp1_vlg_sample_tst(
	CLK,
	CLR,
	p,
	sampler_tx
);
input  CLK;
input  CLR;
input  p;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLR or p)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module exp1_vlg_check_tst (
	R20,
	R21,
	R22,
	R23,
	R24,
	R25,
	R26,
	R27,
	sampler_rx
);
input  R20;
input  R21;
input  R22;
input  R23;
input  R24;
input  R25;
input  R26;
input  R27;
input sampler_rx;

reg  R20_expected;
reg  R21_expected;
reg  R22_expected;
reg  R23_expected;
reg  R24_expected;
reg  R25_expected;
reg  R26_expected;
reg  R27_expected;

reg  R20_prev;
reg  R21_prev;
reg  R22_prev;
reg  R23_prev;
reg  R24_prev;
reg  R25_prev;
reg  R26_prev;
reg  R27_prev;

reg  R20_expected_prev;
reg  R21_expected_prev;
reg  R22_expected_prev;
reg  R23_expected_prev;
reg  R24_expected_prev;
reg  R25_expected_prev;
reg  R26_expected_prev;
reg  R27_expected_prev;

reg  last_R20_exp;
reg  last_R21_exp;
reg  last_R22_exp;
reg  last_R23_exp;
reg  last_R24_exp;
reg  last_R25_exp;
reg  last_R26_exp;
reg  last_R27_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	R20_prev = R20;
	R21_prev = R21;
	R22_prev = R22;
	R23_prev = R23;
	R24_prev = R24;
	R25_prev = R25;
	R26_prev = R26;
	R27_prev = R27;
end

// update expected /o prevs

always @(trigger)
begin
	R20_expected_prev = R20_expected;
	R21_expected_prev = R21_expected;
	R22_expected_prev = R22_expected;
	R23_expected_prev = R23_expected;
	R24_expected_prev = R24_expected;
	R25_expected_prev = R25_expected;
	R26_expected_prev = R26_expected;
	R27_expected_prev = R27_expected;
end



// expected R20
initial
begin
	R20_expected = 1'bX;
end 

// expected R21
initial
begin
	R21_expected = 1'bX;
end 

// expected R22
initial
begin
	R22_expected = 1'bX;
end 

// expected R23
initial
begin
	R23_expected = 1'bX;
end 

// expected R24
initial
begin
	R24_expected = 1'bX;
end 

// expected R25
initial
begin
	R25_expected = 1'bX;
end 

// expected R26
initial
begin
	R26_expected = 1'bX;
end 

// expected R27
initial
begin
	R27_expected = 1'bX;
end 
// generate trigger
always @(R20_expected or R20 or R21_expected or R21 or R22_expected or R22 or R23_expected or R23 or R24_expected or R24 or R25_expected or R25 or R26_expected or R26 or R27_expected or R27)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected R20 = %b | expected R21 = %b | expected R22 = %b | expected R23 = %b | expected R24 = %b | expected R25 = %b | expected R26 = %b | expected R27 = %b | ",R20_expected_prev,R21_expected_prev,R22_expected_prev,R23_expected_prev,R24_expected_prev,R25_expected_prev,R26_expected_prev,R27_expected_prev);
	$display("| real R20 = %b | real R21 = %b | real R22 = %b | real R23 = %b | real R24 = %b | real R25 = %b | real R26 = %b | real R27 = %b | ",R20_prev,R21_prev,R22_prev,R23_prev,R24_prev,R25_prev,R26_prev,R27_prev);
`endif
	if (
		( R20_expected_prev !== 1'bx ) && ( R20_prev !== R20_expected_prev )
		&& ((R20_expected_prev !== last_R20_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R20 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R20_expected_prev);
		$display ("     Real value = %b", R20_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R20_exp = R20_expected_prev;
	end
	if (
		( R21_expected_prev !== 1'bx ) && ( R21_prev !== R21_expected_prev )
		&& ((R21_expected_prev !== last_R21_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R21 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R21_expected_prev);
		$display ("     Real value = %b", R21_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R21_exp = R21_expected_prev;
	end
	if (
		( R22_expected_prev !== 1'bx ) && ( R22_prev !== R22_expected_prev )
		&& ((R22_expected_prev !== last_R22_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R22 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R22_expected_prev);
		$display ("     Real value = %b", R22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R22_exp = R22_expected_prev;
	end
	if (
		( R23_expected_prev !== 1'bx ) && ( R23_prev !== R23_expected_prev )
		&& ((R23_expected_prev !== last_R23_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R23 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R23_expected_prev);
		$display ("     Real value = %b", R23_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R23_exp = R23_expected_prev;
	end
	if (
		( R24_expected_prev !== 1'bx ) && ( R24_prev !== R24_expected_prev )
		&& ((R24_expected_prev !== last_R24_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R24 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R24_expected_prev);
		$display ("     Real value = %b", R24_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R24_exp = R24_expected_prev;
	end
	if (
		( R25_expected_prev !== 1'bx ) && ( R25_prev !== R25_expected_prev )
		&& ((R25_expected_prev !== last_R25_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R25 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R25_expected_prev);
		$display ("     Real value = %b", R25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R25_exp = R25_expected_prev;
	end
	if (
		( R26_expected_prev !== 1'bx ) && ( R26_prev !== R26_expected_prev )
		&& ((R26_expected_prev !== last_R26_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R26 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R26_expected_prev);
		$display ("     Real value = %b", R26_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R26_exp = R26_expected_prev;
	end
	if (
		( R27_expected_prev !== 1'bx ) && ( R27_prev !== R27_expected_prev )
		&& ((R27_expected_prev !== last_R27_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R27 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R27_expected_prev);
		$display ("     Real value = %b", R27_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R27_exp = R27_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module exp1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
reg p;
// wires                                               
wire R20;
wire R21;
wire R22;
wire R23;
wire R24;
wire R25;
wire R26;
wire R27;

wire sampler;                             

// assign statements (if any)                          
exp1 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLR(CLR),
	.p(p),
	.R20(R20),
	.R21(R21),
	.R22(R22),
	.R23(R23),
	.R24(R24),
	.R25(R25),
	.R26(R26),
	.R27(R27)
);

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #220000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
end 

// CLR
initial
begin
	CLR = 1'b0;
	CLR = #180000 1'b1;
end 

// p
initial
begin
	p = 1'b0;
	p = #180000 1'b1;
end 

exp1_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLR(CLR),
	.p(p),
	.sampler_tx(sampler)
);

exp1_vlg_check_tst tb_out(
	.R20(R20),
	.R21(R21),
	.R22(R22),
	.R23(R23),
	.R24(R24),
	.R25(R25),
	.R26(R26),
	.R27(R27),
	.sampler_rx(sampler)
);
endmodule

